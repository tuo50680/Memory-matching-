import pygame,random
#initialize pygame ? 
pygame.init()

#Screen Dimensions
# If it takes up your whole screen GOOD 
# if you want to close it click alt tab and ex it out manually

SCREENWIDTH = 1920
SCREENHEIGHT = 1080
screen = pygame.display.set_mode((SCREENWIDTH, SCREENHEIGHT))
pygame.display.set_caption("Katelyn's IQ is < 60")
#Grid and Box parameters
boxSize = 50 #Later on when we make functions for each individual level, we can change the box size and spacing to make the grid smaller 
spacing = 20 

#Grid Dimensions
'''Basically the width and height is the amount of boxes and to get the correct spacing you need to '''
gridWidth = 3 * boxSize + 2 * spacing
gridHeight = 3 * boxSize + 2 * spacing

#Centering to screen
'''Initial x and y is at top left so to get to the center you take the the SCREEN w & h - the GRID w & h 
   Not sure but im guessing the number you int divide is going to be diff for diff levels'''
initialX = (SCREENWIDTH - gridWidth) // 2
initialY = (SCREENHEIGHT - gridHeight) // 2

#Main Loop
run = True
while run:
    screen.fill("pink")
#Draw 3x3
    for row in range(3):
        for column in range(3):
            x = initialX + column * (boxSize + spacing)
            y = initialY + row * (boxSize + spacing)
            #TO be explained later :l
            pygame.draw.rect(screen, (255,255,255),(x,y,boxSize, boxSize))
    
    #pygame.display.flip() #Update the display I guess?

    #Event Handling (whatever that means)
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False

    pygame.display.update()

pygame.quit()

#Finalize sprite sheets
#Begin making grid
#Making levels
#icon locations
#flipping the tiles
#Having the matched icons stay uncovered
#End game scenarios (Win, lose), Repeat Button







Updates

import pygame,random
#initialize pygame ? 
pygame.init()

#Screen Dimensions
# If it takes up your whole screen GOOD 
# if you want to close it click alt tab and ex it out manually

SCREENWIDTH = 500
SCREENHEIGHT = 500
screen = pygame.display.set_mode((SCREENWIDTH, SCREENHEIGHT))
pygame.display.set_caption("I hope you stub your toe extra hard today")
#Grid and Box parameters
boxSize = 50 #Later on when we make functions for each individual level, we can change the box size and spacing to make the grid smaller 
spacing = 20 

#Grid Dimensions
'''Basically the width and height is the amount of boxes and to get the correct spacing you need to '''
gridWidth = 3 * boxSize + 2 * spacing
gridHeight = 3 * boxSize + 2 * spacing

#Centering to screen
'''Initial x and y is at top left so to get to the center you take the the SCREEN w & h - the GRID w & h 
   Not sure but im guessing the number you int divide is going to be diff for diff levels'''
initialX = (SCREENWIDTH - gridWidth) // 2
initialY = (SCREENHEIGHT - gridHeight) // 2

'''Tracks whether or not the square is hidden or revealed'''
grid = []
for row in range(3):
    newRow = []
    for column in range(3):
        newRow.append(False) #False = hidden / True = revealed
    grid.append(newRow) #append each block into the list grid to keep track of them

#Main Loop
run = True
while run:
    screen.fill("pink")
#Draw 3x3
    for row in range(3):
        for column in range(3):
            x = initialX + column * (boxSize + spacing)
            y = initialY + row * (boxSize + spacing)
            #TO be explained later :l

            if grid[row][column]: #if clicked and revealed, change to purple (just a test, we'll add whatever later)
                pygame.draw.rect(screen, (255, 0, 255), (x,y,boxSize, boxSize))
            else:
                pygame.draw.rect(screen, (255,255,255),(x,y,boxSize, boxSize))
    
    #pygame.display.flip() #Update the display I guess?

       
    #Event Handling (whatever that means)
    '''Event tracks what the mouse is doing'''

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False
            
        if event.type == pygame.MOUSEBUTTONDOWN:
            mouseX, mouseY = event.pos #tracks the mouse location at x,y 
            
            for row in range(3):
                for column in range(3):
                    x = initialX + column * (boxSize + spacing)
                    y = initialY + row * (boxSize + spacing)
                    if x <= mouseX <= x + boxSize and y <= mouseY <= y + boxSize: #checks to make sure that the mouse clicked within the boundary of the square
                        grid[row][column] = not grid[row][column] #flips the square after clicked

    pygame.display.update()

pygame.quit()

#Finalize sprite sheets
#Begin making grid
#Making levels
#icon locations
#flipping the tiles
#Having the matched icons stay uncovered
#End game scenarios (Win, lose), Repeat Button








